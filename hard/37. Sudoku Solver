class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None. Do not return anything, modify board in-place instead.
        """
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]
        empty_cells = []

        #Fill sets and collect empty cells
        for i in range(9):
            for j in range(9):
                value = board[i][j]
                if value != ".":
                    box_index = (i // 3) * 3 + (j // 3)
                    rows[i].add(value)
                    cols[j].add(value)
                    boxes[box_index].add(value)
                else:
                    empty_cells.append((i, j))

        #Backtracking using empty_cells list
        def backtrack(index):
            if index == len(empty_cells):
                return True

            i, j = empty_cells[index]
            box_index = (i // 3) * 3 + (j // 3)

            for num in map(str, range(1, 10)):
                if num not in rows[i] and num not in cols[j] and num not in boxes[box_index]:
                    board[i][j] = num
                    rows[i].add(num)
                    cols[j].add(num)
                    boxes[box_index].add(num)

                    if backtrack(index + 1):
                        return True

                    board[i][j] = "."
                    rows[i].remove(num)
                    cols[j].remove(num)
                    boxes[box_index].remove(num)

            return False

        backtrack(0)
